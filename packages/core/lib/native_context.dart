// Autogenerated from Pigeon (v7.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class NativeContext {
  NativeContext({
    this.app,
    this.device,
    this.library,
    this.locale,
    this.network,
    this.os,
    this.referrer,
    this.screen,
    this.timezone,
    this.userAgent,
  });

  NativeContextApp? app;

  NativeContextDevice? device;

  NativeContextLibrary? library;

  String? locale;

  NativeContextNetwork? network;

  NativeContextOS? os;

  String? referrer;

  NativeContextScreen? screen;

  String? timezone;

  String? userAgent;

  Object encode() {
    return <Object?>[
      app?.encode(),
      device?.encode(),
      library?.encode(),
      locale,
      network?.encode(),
      os?.encode(),
      referrer,
      screen?.encode(),
      timezone,
      userAgent,
    ];
  }

  static NativeContext decode(Object result) {
    result as List<Object?>;
    return NativeContext(
      app: result[0] != null
          ? NativeContextApp.decode(result[0]! as List<Object?>)
          : null,
      device: result[1] != null
          ? NativeContextDevice.decode(result[1]! as List<Object?>)
          : null,
      library: result[2] != null
          ? NativeContextLibrary.decode(result[2]! as List<Object?>)
          : null,
      locale: result[3] as String?,
      network: result[4] != null
          ? NativeContextNetwork.decode(result[4]! as List<Object?>)
          : null,
      os: result[5] != null
          ? NativeContextOS.decode(result[5]! as List<Object?>)
          : null,
      referrer: result[6] as String?,
      screen: result[7] != null
          ? NativeContextScreen.decode(result[7]! as List<Object?>)
          : null,
      timezone: result[8] as String?,
      userAgent: result[9] as String?,
    );
  }
}

class NativeContextApp {
  NativeContextApp({
    this.build,
    this.name,
    this.namespace,
    this.version,
  });

  String? build;

  String? name;

  String? namespace;

  String? version;

  Object encode() {
    return <Object?>[
      build,
      name,
      namespace,
      version,
    ];
  }

  static NativeContextApp decode(Object result) {
    result as List<Object?>;
    return NativeContextApp(
      build: result[0] as String?,
      name: result[1] as String?,
      namespace: result[2] as String?,
      version: result[3] as String?,
    );
  }
}

class NativeContextDevice {
  NativeContextDevice({
    this.id,
    this.manufacturer,
    this.model,
    this.name,
    this.type,
    this.adTrackingEnabled,
    this.advertisingId,
    this.trackingStatus,
    this.token,
  });

  String? id;

  String? manufacturer;

  String? model;

  String? name;

  String? type;

  bool? adTrackingEnabled;

  String? advertisingId;

  String? trackingStatus;

  String? token;

  Object encode() {
    return <Object?>[
      id,
      manufacturer,
      model,
      name,
      type,
      adTrackingEnabled,
      advertisingId,
      trackingStatus,
      token,
    ];
  }

  static NativeContextDevice decode(Object result) {
    result as List<Object?>;
    return NativeContextDevice(
      id: result[0] as String?,
      manufacturer: result[1] as String?,
      model: result[2] as String?,
      name: result[3] as String?,
      type: result[4] as String?,
      adTrackingEnabled: result[5] as bool?,
      advertisingId: result[6] as String?,
      trackingStatus: result[7] as String?,
      token: result[8] as String?,
    );
  }
}

class NativeContextLibrary {
  NativeContextLibrary({
    this.name,
    this.version,
  });

  String? name;

  String? version;

  Object encode() {
    return <Object?>[
      name,
      version,
    ];
  }

  static NativeContextLibrary decode(Object result) {
    result as List<Object?>;
    return NativeContextLibrary(
      name: result[0] as String?,
      version: result[1] as String?,
    );
  }
}

class NativeContextOS {
  NativeContextOS({
    this.name,
    this.version,
  });

  String? name;

  String? version;

  Object encode() {
    return <Object?>[
      name,
      version,
    ];
  }

  static NativeContextOS decode(Object result) {
    result as List<Object?>;
    return NativeContextOS(
      name: result[0] as String?,
      version: result[1] as String?,
    );
  }
}

class NativeContextNetwork {
  NativeContextNetwork({
    this.cellular,
    this.wifi,
    this.bluetooth,
  });

  bool? cellular;

  bool? wifi;

  bool? bluetooth;

  Object encode() {
    return <Object?>[
      cellular,
      wifi,
      bluetooth,
    ];
  }

  static NativeContextNetwork decode(Object result) {
    result as List<Object?>;
    return NativeContextNetwork(
      cellular: result[0] as bool?,
      wifi: result[1] as bool?,
      bluetooth: result[2] as bool?,
    );
  }
}

class NativeContextScreen {
  NativeContextScreen({
    this.height,
    this.width,
    this.density,
  });

  int? height;

  int? width;

  double? density;

  Object encode() {
    return <Object?>[
      height,
      width,
      density,
    ];
  }

  static NativeContextScreen decode(Object result) {
    result as List<Object?>;
    return NativeContextScreen(
      height: result[0] as int?,
      width: result[1] as int?,
      density: result[2] as double?,
    );
  }
}

class _NativeContextApiCodec extends StandardMessageCodec {
  const _NativeContextApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is NativeContext) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is NativeContextApp) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is NativeContextDevice) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is NativeContextLibrary) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is NativeContextNetwork) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is NativeContextOS) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is NativeContextScreen) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return NativeContext.decode(readValue(buffer)!);
      case 129: 
        return NativeContextApp.decode(readValue(buffer)!);
      case 130: 
        return NativeContextDevice.decode(readValue(buffer)!);
      case 131: 
        return NativeContextLibrary.decode(readValue(buffer)!);
      case 132: 
        return NativeContextNetwork.decode(readValue(buffer)!);
      case 133: 
        return NativeContextOS.decode(readValue(buffer)!);
      case 134: 
        return NativeContextScreen.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class NativeContextApi {
  /// Constructor for [NativeContextApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NativeContextApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _NativeContextApiCodec();

  Future<NativeContext> getContext(bool arg_collectDeviceId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeContextApi.getContext', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_collectDeviceId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as NativeContext?)!;
    }
  }
}
